<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DataTable使用</title>
    <url>/c/DataTable%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="C-System-Data-DataTable使用方法"><a href="#C-System-Data-DataTable使用方法" class="headerlink" title="C# System.Data.DataTable使用方法"></a>C# System.Data.DataTable使用方法</h4><h5 id="1-添加引用"><a href="#1-添加引用" class="headerlink" title="1.添加引用"></a>1.添加引用</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Data</span><br></pre></td></tr></table></figure>

<h5 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2.创建表"></a>2.创建表</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个空表</span></span><br><span class="line">DataTable dt = <span class="keyword">new</span> System.Data.DataTable();	</span><br><span class="line"><span class="comment">//创建一个带名字的空表</span></span><br><span class="line">DataTable dt2 = <span class="keyword">new</span> System.Data.DataTable(<span class="string">&quot;Table_new&quot;</span>);	</span><br></pre></td></tr></table></figure>

<h5 id="3-创建列"><a href="#3-创建列" class="headerlink" title="3.创建列"></a>3.创建列</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建一个空列</span></span><br><span class="line">DataColumn dc = <span class="keyword">new</span> System.Data.DataColumn();	</span><br><span class="line">dt.Columns.Add(dc);</span><br><span class="line"><span class="comment">//2.创建带列名和类型的列(两种方式均可)</span></span><br><span class="line">dt.Columns.Add(<span class="string">&quot;column0&quot;</span>,System.Type.GetType(<span class="string">&quot;System.String&quot;</span>));</span><br><span class="line">dt.Columns.Add(<span class="string">&quot;column1&quot;</span>, <span class="keyword">typeof</span>(String));</span><br><span class="line"><span class="comment">//3.通过列架构添加列</span></span><br><span class="line">DataColumn dc2 = <span class="keyword">new</span> System.Data.DataColumn(<span class="string">&quot;column2&quot;</span>,System.Type.GetType(<span class="string">&quot;System.DateTime&quot;</span>));</span><br><span class="line">dt.Columns.Add(dc2);</span><br><span class="line">DataColumn dc3 = <span class="keyword">new</span> System.Data.DataColumn(<span class="string">&quot;column3&quot;</span>, <span class="keyword">typeof</span>(DateTime));</span><br><span class="line">dt.Columns.Add(dc3);</span><br></pre></td></tr></table></figure>

<h5 id="4-创建行"><a href="#4-创建行" class="headerlink" title="4.创建行"></a>4.创建行</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建空行</span></span><br><span class="line">DataRow dr = dt.NewRow();</span><br><span class="line">dt.Rows.Add(dr);</span><br><span class="line"><span class="comment">//2.创建空行</span></span><br><span class="line">dt.Rows.Add();</span><br><span class="line"><span class="comment">//3.通过行框架创建并赋值 数据顺序要与列顺序对应</span></span><br><span class="line">dt.Rows.Add(<span class="string">&quot;张三&quot;</span>,DateTime.Now);	</span><br><span class="line"><span class="comment">//4.通过复制一行创建</span></span><br><span class="line">dt.Rows.Add(dt2.Rows[i].ItemArray);</span><br></pre></td></tr></table></figure>

<h5 id="5-赋值和取值"><a href="#5-赋值和取值" class="headerlink" title="5.赋值和取值"></a>5.赋值和取值</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.新建行赋值 索引 or 列名</span></span><br><span class="line">DataRow dr = dt.NewRow();</span><br><span class="line">dr[<span class="number">0</span>] = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">dr[<span class="string">&quot;column1&quot;</span>] = DateTime.Now;</span><br><span class="line"><span class="comment">//2.对已有行进行赋值</span></span><br><span class="line">dt.Row[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">dt.Row[<span class="number">0</span>][<span class="string">&quot;column1&quot;</span>] = DateTime.Now;</span><br><span class="line"><span class="comment">//3.取值</span></span><br><span class="line"><span class="built_in">string</span> name = dt.Rows[<span class="number">0</span>][<span class="number">0</span>].toString();</span><br><span class="line"><span class="built_in">string</span> time = dt.Rows[<span class="number">0</span>][<span class="string">&quot;column1&quot;</span>].toString();</span><br></pre></td></tr></table></figure>

<h5 id="6-筛选行"><a href="#6-筛选行" class="headerlink" title="6.筛选行"></a>6.筛选行</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">DataRow drs[] = dt.Select(<span class="string">&quot;column1 is null&quot;</span>);</span><br><span class="line">DataRow drs[] = dt.Select(<span class="string">&quot;column0 = &#x27;张三&#x27;&quot;</span>);</span><br><span class="line">DataRow drs[] = dt.Select(<span class="string">&quot;column0 like &#x27;张%&#x27;&quot;</span>);</span><br><span class="line">DataRow drs[] = dt.Select(<span class="string">&quot;column0 like &#x27;张%&#x27;&quot;</span>,<span class="string">&quot;column1 DESC&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="7-删除行"><a href="#7-删除行" class="headerlink" title="7.删除行"></a>7.删除行</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.Remove or RemoveAt</span></span><br><span class="line">dt.Rows.Remove(dt.Rows[<span class="number">0</span>]);</span><br><span class="line">dt.Rows.RemoveAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//2.Delete</span></span><br><span class="line">dt.Rows[<span class="number">0</span>].Delete();</span><br><span class="line">dt.AcceptChanges();</span><br></pre></td></tr></table></figure>

<h5 id="8-复制表"><a href="#8-复制表" class="headerlink" title="8.复制表"></a>8.复制表</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.表结构和数据均复制</span></span><br><span class="line">DataTable dtn = <span class="keyword">new</span> System.Data.DataTable();</span><br><span class="line">dtn = dt.Copy();</span><br><span class="line"><span class="comment">//2.清空表的数据</span></span><br><span class="line">dtn.Clear();</span><br><span class="line"><span class="comment">//3.仅复制表结构</span></span><br><span class="line">dtn = dt.Clone();</span><br></pre></td></tr></table></figure>

<h5 id="9-表排序"><a href="#9-表排序" class="headerlink" title="9.表排序"></a>9.表排序</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取表视图</span></span><br><span class="line">DataView dv = dt.DefaultView;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">dv.Sort = <span class="string">&quot;ID DESC&quot;</span>;</span><br><span class="line">dv.ToTable();</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScrpit事件代理</title>
    <url>/JavaScript/JavaScrpit%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​        JavaScript事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。举一个例子：</p>
<blockquote>
<p>​        有三个同事预计会在周一收到快递。现有两种办法：一是三个人在公司门口等快递；二是委托给前台代为签收。现实当中，我们大都采用委托的方案。前台收到快递后，先会判断收件人是谁，然后按照收件人的要求签收。这种方案还有一个优势，那就是即使公司里来了新员工，前台也会在收到寄给新员工的快递后核实并代为签收。这里其实还有2层意思的：</p>
<p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的DOM节点是有事件的；</p>
<p>第二，新员工也是可以被前台代为签收的，即程序中新添加的DOM节点也是有事件的。</p>
</blockquote>
<span id="more"></span>

<h3 id="使用事件委托的原因"><a href="#使用事件委托的原因" class="headerlink" title="使用事件委托的原因"></a>使用事件委托的原因</h3><ul>
<li>多个节点需要实现相同的功能，若每个节点分别绑定事件，可以实现功能但是会造成资源的浪费。而且绑定事件是需要占用内存的，当节点过多时可能会造成严重的后果</li>
<li>动态添加节点是很常见的，对于新生成的节点，可以单独对其进行事件绑定，但是跟上面同样的原因，也有可能造成不可控制的后果</li>
<li>使用事件委托，比如多个节点需要实现的功能交给它们的父节点实现，而不是在这些节点单独绑定事件，从原来内存开销N到现在只需要1个单位。</li>
</ul>
<h3 id="如何实现事情委托"><a href="#如何实现事情委托" class="headerlink" title="如何实现事情委托"></a>如何实现事情委托</h3><p>下面通过对比几个例子，来进行事情委托的说明:</p>
<h5 id="1-子节点实现相同的功能-点击li弹出文本内容"><a href="#1-子节点实现相同的功能-点击li弹出文本内容" class="headerlink" title="1.子节点实现相同的功能 点击li弹出文本内容"></a>1.子节点实现相同的功能 点击li弹出文本内容</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// html code</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul1&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javascript code</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> obj_ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;ul1&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> obj_lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;obj_lis.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    	obj_lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    		<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">innerText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码很简单，但是运行起来的开销会很大，那改写成事件委托是怎么样呢：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> obj_ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;ul1&quot;</span>);</span><br><span class="line">    obj_ul.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> ev = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">        <span class="keyword">var</span> tg = ev.<span class="property">target</span> || ev.<span class="property">srcElement</span>;</span><br><span class="line">        <span class="keyword">if</span>(tg.<span class="property">nodeName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;li&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(tg.<span class="property">innerText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Event对象提供了一个属性叫target，可以返回事件的目标节点，我们成为事件源，也就是说，target就可以表示为当前的事件操作的dom，当然，这个是有兼容性的，标准浏览器用ev.target，IE浏览器用event.srcElement，此时只是获取了当前节点的位置，并不知道是什么节点名称，这里我们用nodeName来获取具体是什么标签名，这个返回的是一个大写的，我们可以转成小写再做比较（习惯问题）。</p>
<h5 id="2-添加的新节点绑定事件"><a href="#2-添加的新节点绑定事件" class="headerlink" title="2.添加的新节点绑定事件"></a>2.添加的新节点绑定事件</h5><p>​        对于新添加的节点，如果想要绑定功能必须先找到这个节点再进行添加事件的操作，而使用了事件代理，则只要他的父节点存在该功能的代理且该节点满足实现该功能的条件，就相当于已经绑定了该事件。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown常用语法</title>
    <url>/%E5%85%B6%E4%BB%96/MarkDown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="MakeDown-（Typora）"><a href="#MakeDown-（Typora）" class="headerlink" title="MakeDown （Typora）"></a>MakeDown （Typora）</h3><h4 id="一、常用快捷键"><a href="#一、常用快捷键" class="headerlink" title="一、常用快捷键"></a>一、常用快捷键</h4><table>
<thead>
<tr>
<th>序号</th>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Ctrl + Shift + I</td>
<td>插入图片</td>
</tr>
<tr>
<td>2</td>
<td>Ctrl + B</td>
<td>加粗</td>
</tr>
<tr>
<td>3</td>
<td>Ctrl + I</td>
<td>斜体</td>
</tr>
<tr>
<td>4</td>
<td>Ctrl + H</td>
<td>替换</td>
</tr>
</tbody></table>
<span id="more"></span>
<p>| 5    | Ctrl + Shift + K | 代码块         |<br>| 6    | Ctrl + Shift + L | 文件大纲侧边栏 |<br>| 7    | Ctrl + &#x2F;         | 源代码模式切换 |<br>|      |                  |                |</p>
<h4 id="二、常用语法"><a href="#二、常用语法" class="headerlink" title="二、常用语法"></a>二、常用语法</h4><ul>
<li><p>斜体：*文本*  或者 _文本_，效果如下</p>
<p>​                    <em>文本</em>         <em>文本</em></p>
</li>
<li><p>加粗：**文本** 或者 __文本__ ，效果如下</p>
<p> ​                    <strong>文本</strong>     <strong>文本</strong></p>
</li>
<li><p>标记：==文本==，效果如下</p>
<p> ​                       &#x3D;&#x3D;文本&#x3D;&#x3D;</p>
</li>
<li><p>删除线： ~~文本<del>\</del>\，效果如下</p>
<p>​                        <del>文本</del></p>
</li>
<li><p>引用：   &gt;文本</p>
</li>
<li><p>下标：  H~2~O</p>
</li>
<li><p>上标：  2^10^</p>
</li>
<li><p>图片</p>
<ul>
<li>插入链接    [link](https:&#x2F;&#x2F;地址)</li>
<li>插入图片    ![Alt](https:&#x2F;&#x2F;图片地址.jpg)</li>
<li>图片设置尺寸   ![Alt](https:&#x2F;&#x2F;图片地址.jpg&#x3D;300x200)</li>
<li>图片设置居中   ![Alt](https:&#x2F;&#x2F;图片地址.jpg#pic_center)</li>
</ul>
</li>
<li><p>插入代码块   ``` 语言选择</p>
</li>
</ul>
<p>​                             代码内容</p>
<p>​                             ```</p>
<ul>
<li><p>列表</p>
<ul>
<li>分级列表：  输入’-‘和空格</li>
<li>序号列表： 输入’1.’ 序号会自动生成且形式统一变化</li>
</ul>
</li>
<li><p>任务完成框</p>
<ul>
<li>-[]计划任务                    </li>
<li>-[x]完成任务</li>
</ul>
</li>
<li><p>表格          |–|–|–|</p>
<ul>
<li><p>调整    :—-     居左</p>
<p>​            :—-:    居中</p>
<p>​            —-:     居右</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql Server附加数据库</title>
    <url>/sql/Sql-Server%E9%99%84%E5%8A%A0%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>Sql Server可以通过备份文件.bak直接还原数据库，而从mdf文件和ldf文件构建数据库有以下几个步骤：</p>
<span id="more"></span>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建数据库</span><br><span class="line"><span class="number">2.</span>使用脚本附加数据库</span><br><span class="line">USE master</span><br><span class="line">	GO</span><br><span class="line">	<span class="keyword">CREATE</span> DATABASE DbName</span><br><span class="line">		<span class="keyword">ON</span> (FILENAME<span class="operator">=</span><span class="string">&#x27;..\XX.mdf&#x27;</span>),(FILENAME<span class="operator">=</span><span class="string">&#x27;..\XX.ldf&#x27;</span>)</span><br><span class="line">	<span class="keyword">FOR</span> ATTACH;</span><br><span class="line"> GO	</span><br></pre></td></tr></table></figure>

<p>脚本里mdf文件和ldf文件使用绝对路径，等待指令执行完成，数据库就还原成功。</p>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>group_concat</title>
    <url>/sql/group-concat/</url>
    <content><![CDATA[<h3 id="Sql-Server-实现Group-concat函数效果"><a href="#Sql-Server-实现Group-concat函数效果" class="headerlink" title="Sql Server 实现Group_concat函数效果"></a>Sql Server 实现Group_concat函数效果</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> #temp(id <span class="type">int</span>,<span class="keyword">value</span> <span class="type">varchar</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> #temp <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;aa&#x27;</span>),(<span class="number">1</span>,<span class="string">&#x27;bb&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;cc&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;dd&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;ee&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id,STUFF((<span class="keyword">select</span> <span class="string">&#x27;,&#x27;</span><span class="operator">+</span><span class="keyword">value</span> <span class="keyword">from</span> #temp t </span><br><span class="line">                 <span class="keyword">where</span> t.id<span class="operator">=</span>#temp.id <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)),<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> <span class="keyword">value</span></span><br><span class="line"><span class="keyword">from</span> #temp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> id</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> #temp</span><br></pre></td></tr></table></figure>

<h5 id="注-object-id-是一个系统函数-返回架构范围内对象的数据库对象标识号"><a href="#注-object-id-是一个系统函数-返回架构范围内对象的数据库对象标识号" class="headerlink" title="注: object_id 是一个系统函数 返回架构范围内对象的数据库对象标识号"></a>注: object_id 是一个系统函数 返回架构范围内对象的数据库对象标识号</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if <span class="keyword">not</span> object_id(N<span class="string">&#x27;Tempdb..#T&#x27;</span>) <span class="keyword">is</span> <span class="keyword">null</span>		<span class="comment">--N&#x27;&#x27;以unicode编码存储</span></span><br><span class="line">	<span class="keyword">drop</span> <span class="keyword">table</span> #T</span><br><span class="line">go</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>spt_values</title>
    <url>/sql/spt-values/</url>
    <content><![CDATA[<h3 id="Master-spt-values表"><a href="#Master-spt-values表" class="headerlink" title="Master..spt_values表"></a>Master..spt_values表</h3><ul>
<li><p>用于构造辅助数据，当type&#x3D;’p’时数字局限于[0,2047]</p>
</li>
<li><p>构造时间：如获取接下来12个月的时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	<span class="keyword">YEAR</span>(<span class="keyword">CONVERT</span>(<span class="type">date</span>,DATEADD(<span class="keyword">month</span>,number,GETDATE()),<span class="number">120</span>)) <span class="keyword">AS</span> <span class="keyword">year</span>,</span><br><span class="line">	<span class="keyword">MONTH</span>(<span class="keyword">CONVERT</span>(<span class="type">date</span>,DATEADD(<span class="keyword">month</span>,number,GETDATE()),<span class="number">120</span>)) <span class="keyword">AS</span> <span class="keyword">month</span></span><br><span class="line"><span class="keyword">from</span> master..spt_values <span class="keyword">where</span> type<span class="operator">=</span><span class="string">&#x27;p&#x27;</span> <span class="keyword">and</span> number<span class="operator">&lt;</span><span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>结果如下</p>
<p><img src="/sql/spt-values/image-20220209140438508.png" alt="image-20220209140438508"></p>
</li>
<li><p>全表结构如下</p>
</li>
</ul>
<p><img src="/sql/spt-values/image-20220209140514527.png" alt="image-20220209140514527"></p>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>vs code常用快捷键</title>
    <url>/%E5%85%B6%E4%BB%96/vs-code%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h3 id="一、快捷键总览"><a href="#一、快捷键总览" class="headerlink" title="一、快捷键总览"></a>一、快捷键总览</h3><p>​            <a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a></p>
<h3 id="二、常用快捷键"><a href="#二、常用快捷键" class="headerlink" title="二、常用快捷键"></a>二、常用快捷键</h3><table>
<thead>
<tr>
<th>序号</th>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Ctrl + X</td>
<td>剪切当前行</td>
</tr>
<tr>
<td>2</td>
<td>Ctrl + C</td>
<td>复制当前行</td>
</tr>
<tr>
<td>3</td>
<td>Alt + ↑&#x2F;↓</td>
<td>移动当前行向上&#x2F;向下</td>
</tr>
<tr>
<td>4</td>
<td>Shift + Alt + ↑&#x2F;↓</td>
<td>向上&#x2F;向下复制当前行</td>
</tr>
<tr>
<td>5</td>
<td>Ctrl + Shift + K</td>
<td>删除当前行</td>
</tr>
<tr>
<td>6</td>
<td>Ctrl + Enter</td>
<td>插入空行并移动光标</td>
</tr>
<tr>
<td>7</td>
<td>Ctrl + Shift + Enter</td>
<td>向上插入空行并移动光标</td>
</tr>
<tr>
<td>8</td>
<td>Ctrl + ]&#x2F;[</td>
<td>缩进&#x2F;取消缩进一次</td>
</tr>
<tr>
<td>9</td>
<td>Ctrl + End</td>
<td>移动到文件最后</td>
</tr>
<tr>
<td>10</td>
<td>Ctrl + Home</td>
<td>移动到文件开头</td>
</tr>
<tr>
<td>11</td>
<td>Ctrl + &#x2F;</td>
<td>注释&#x2F;取消注释</td>
</tr>
<tr>
<td>12</td>
<td>Shift + Alt + A</td>
<td>块注释&#x2F;取消注释</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串转换日期</title>
    <url>/sql/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%97%A5%E6%9C%9F/</url>
    <content><![CDATA[<h3 id="Sql-Server-字符串与日期相互转换"><a href="#Sql-Server-字符串与日期相互转换" class="headerlink" title="Sql Server 字符串与日期相互转换"></a>Sql Server 字符串与日期相互转换</h3><h5 id="1-字符串转换成日期"><a href="#1-字符串转换成日期" class="headerlink" title="1.字符串转换成日期"></a>1.字符串转换成日期</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CONVERT</span>(DATETIME,<span class="string">&#x27;2022-02-09 16:17:23&#x27;</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h5 id="2-日期转换成字符串-常用"><a href="#2-日期转换成字符串-常用" class="headerlink" title="2.日期转换成字符串(常用)"></a>2.日期转换成字符串(常用)</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">8</span>): <span class="number">10</span>:<span class="number">57</span>:<span class="number">46</span>    </span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">20</span>): <span class="number">2006</span><span class="number">-05</span><span class="number">-16</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">47</span>   </span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">21</span>): <span class="number">2006</span><span class="number">-05</span><span class="number">-16</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">47.157</span>    </span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">23</span>): <span class="number">2006</span><span class="number">-05</span><span class="number">-16</span>   </span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">24</span>): <span class="number">10</span>:<span class="number">57</span>:<span class="number">47</span>   </span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">25</span>): <span class="number">2006</span><span class="number">-05</span><span class="number">-16</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">47.250</span>       </span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">102</span>): <span class="number">2006.05</span><span class="number">.16</span>   </span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">108</span>): <span class="number">10</span>:<span class="number">57</span>:<span class="number">49</span>   </span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">111</span>): <span class="number">2006</span><span class="operator">/</span><span class="number">05</span><span class="operator">/</span><span class="number">16</span>   </span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">112</span>): <span class="number">20060516</span>   </span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">114</span>): <span class="number">10</span>:<span class="number">57</span>:<span class="number">49</span>:<span class="number">547</span>   </span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">120</span>): <span class="number">2006</span><span class="number">-05</span><span class="number">-16</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">49</span>   </span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">121</span>): <span class="number">2006</span><span class="number">-05</span><span class="number">-16</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">49.700</span>    </span><br></pre></td></tr></table></figure>

<h5 id="3-日期与时间函数"><a href="#3-日期与时间函数" class="headerlink" title="3.日期与时间函数"></a>3.日期与时间函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> getdate()	<span class="comment">--获取当前日期时间</span></span><br><span class="line"><span class="keyword">Select</span> dateadd(<span class="keyword">day</span>,<span class="number">2</span>,getdate())	 <span class="comment">--当前日期加两天</span></span><br><span class="line"><span class="keyword">Select</span> datediff(dat,<span class="string">&#x27;2022-02-01&#x27;</span>,getdate())	<span class="comment">--返回两个日期的间隔</span></span><br><span class="line"><span class="keyword">Select</span> datepart(<span class="keyword">month</span>,getdate())	<span class="comment">--返回指定部分值</span></span><br><span class="line"><span class="keyword">Select</span> datename(weekday,getdate())	<span class="comment">--返回指定部分字符串</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>索引</title>
    <url>/sql/%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h4><p><a href="https://blog.csdn.net/weixin_40805079/article/details/88064149?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164438782916780255267055%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164438782916780255267055&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-88064149.first_rank_v2_pc_rank_v29&amp;utm_term=%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_40805079/article/details/88064149?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164438782916780255267055%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164438782916780255267055&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-88064149.first_rank_v2_pc_rank_v29&amp;utm_term=%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95&amp;spm=1018.2226.3001.4187</a></p>
<h4 id="二、创建索引"><a href="#二、创建索引" class="headerlink" title="二、创建索引"></a>二、创建索引</h4><h5 id="2-1-聚集索引"><a href="#2-1-聚集索引" class="headerlink" title="2.1 聚集索引"></a>2.1 聚集索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> cons_name <span class="keyword">Primary</span> Key(colname <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>,[...]) <span class="keyword">WITH</span> (DROP_EXISTING <span class="operator">=</span> <span class="keyword">ON</span>)</span><br></pre></td></tr></table></figure>

<p>定义主键的时候会自动添加索引，但是可以控制聚集索引&#x2F;非聚集索引。WITH (DROP_EXISTING &#x3D; ON)作用时删除已存在的同名索引，并且不会引起非聚集索引的重建。查看表里的索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> sp_helpindex <span class="variable">@objname</span><span class="operator">=</span><span class="string">&#x27;A01&#x27;</span></span><br><span class="line">go</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="/sql/%E7%B4%A2%E5%BC%95/image-20220209153142123.png" alt="image-20220209153142123"></p>
<p>且clustered index(聚集索引) 唯一、无法被删除，也可以使用以下语句创建聚集索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> CLUSTERED INDEX index_name <span class="keyword">on</span> table_name(colname <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>[,...])</span><br><span class="line"><span class="keyword">WITH</span> (DROP_EXISTING <span class="operator">=</span> <span class="keyword">ON</span>)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-非聚集索引"><a href="#2-2-非聚集索引" class="headerlink" title="2.2 非聚集索引"></a>2.2 非聚集索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> NONCLUSTERED INDEX index_name <span class="keyword">on</span> table_name(colname <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>[,...])</span><br></pre></td></tr></table></figure>

<h5 id="2-3-唯一索引"><a href="#2-3-唯一索引" class="headerlink" title="2.3 唯一索引"></a>2.3 唯一索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">UNIQUE</span> INDEX index_name <span class="keyword">on</span> table_name(colname <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>[,...])</span><br></pre></td></tr></table></figure>

<h5 id="2-4-其他"><a href="#2-4-其他" class="headerlink" title="2.4 其他"></a>2.4 其他</h5><ul>
<li>with(online &#x3D; on|off ) 创建索引时用户可以访问表中的数据</li>
<li>with(pad_index &#x3D; on|off fillfactor &#x3D; 80) 设置叶级别页的填充百分比</li>
<li>with(allow_row_locks &#x3D; on|off | allow_page_locks &#x3D; on |off) 是否允许行锁&#x2F;页锁</li>
<li>with(data_compression &#x3D; row | page ) 可用于压缩索引大小</li>
</ul>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
